type Log {
  id: ID!
  log: String
  description: String
  mood: String
  date: String
  meds: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelLogConnection {
  items: [Log]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelLogFilterInput {
  id: ModelIDFilterInput
  log: ModelStringFilterInput
  description: ModelStringFilterInput
  mood: ModelStringFilterInput
  date: ModelStringFilterInput
  meds: ModelStringFilterInput
  and: [ModelLogFilterInput]
  or: [ModelLogFilterInput]
  not: ModelLogFilterInput
}

type Query {
  getLog(id: ID!): Log
  listLogs(filter: ModelLogFilterInput, limit: Int, nextToken: String): ModelLogConnection
}

input CreateLogInput {
  id: ID
  log: String
  description: String
  mood: String
  date: String
  meds: String
}

input UpdateLogInput {
  id: ID!
  log: String
  description: String
  mood: String
  date: String
  meds: String
}

input DeleteLogInput {
  id: ID
}

type Mutation {
  createLog(input: CreateLogInput!): Log
  updateLog(input: UpdateLogInput!): Log
  deleteLog(input: DeleteLogInput!): Log
}

type Subscription {
  onCreateLog: Log @aws_subscribe(mutations: ["createLog"])
  onUpdateLog: Log @aws_subscribe(mutations: ["updateLog"])
  onDeleteLog: Log @aws_subscribe(mutations: ["deleteLog"])
}
