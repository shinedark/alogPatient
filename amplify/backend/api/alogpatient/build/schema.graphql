type Logs {
  id: ID!
  description: String!
  log: String!
  date: String!
  mood: String!
  meds: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelLogsConnection {
  items: [Logs]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelLogsFilterInput {
  id: ModelIDFilterInput
  description: ModelStringFilterInput
  log: ModelStringFilterInput
  date: ModelStringFilterInput
  mood: ModelStringFilterInput
  meds: ModelStringFilterInput
  and: [ModelLogsFilterInput]
  or: [ModelLogsFilterInput]
  not: ModelLogsFilterInput
}

type Query {
  getLogs(id: ID!): Logs
  listLogss(filter: ModelLogsFilterInput, limit: Int, nextToken: String): ModelLogsConnection
}

input CreateLogsInput {
  id: ID
  description: String!
  log: String!
  date: String!
  mood: String!
  meds: String
}

input UpdateLogsInput {
  id: ID!
  description: String
  log: String
  date: String
  mood: String
  meds: String
}

input DeleteLogsInput {
  id: ID
}

type Mutation {
  createLogs(input: CreateLogsInput!): Logs
  updateLogs(input: UpdateLogsInput!): Logs
  deleteLogs(input: DeleteLogsInput!): Logs
}

type Subscription {
  onCreateLogs: Logs @aws_subscribe(mutations: ["createLogs"])
  onUpdateLogs: Logs @aws_subscribe(mutations: ["updateLogs"])
  onDeleteLogs: Logs @aws_subscribe(mutations: ["deleteLogs"])
}
